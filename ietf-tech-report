#!/usr/bin/env perl
#
# Copyright (c) 2012 IETF Trust and the persons identified as
# authors of the code.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in
# the documentation and/or other materials provided with the
# distribution.
#
# Neither the name of Internet Society, IETF or IETF Trust, nor the
# names of specific contributors, may be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#  Author:  Alan DeKok <aland@freeradius.org>
#
use Getopt::Std;

%drafts = ();			# information about the draft
%rfc = ();			# information about the RFC
%search = ();			# option: search for drafts using these RFCs
%opts = ();			# command-line options
%wgs = ();			# working groups to ignore
%tech = ();			# named technologies
%notech = ();			# exclude ones which have normative references on these docs
$keyword = "";

getopts('hik:nN:r:W:', \%opts);

if ($opts{'h'}) {
    print "ietf-tech-report [-h] [-i] [-n] [-N NAME] [-r LIST] [-W EXCLUDE] tech...\n";
    print "   -h         print this message\n";
    print "   -i         include informative references\n";
    print "   -k         keyword(s) to look for\n";
    print "   -n         include normative references (default)\n";
    print "   -N NAME    exclude normative references on 'name'\n";
    print "   -r LIST    comma-separated list of key RFCs\n";
    print "   -W EXCLUDE comma-separated list of working groups to exclude\n";
    print "\n";
    print "  The 'tech' is a list of RFCs or technologies to look for.\n";
    print "              See the file 'tech.txt' for more configuration\n";
    exit(1);
}

$opts{'n'} = 1;

# The arguments are just a list of RFCs to look for.
#
# -r 2865,2866,3179
foreach (split(/,/, $opts{'r'})) {
    if (! /^\d+$/) {
	die "FATAL: Command line option is not a number: -r $_\n";
    }

    $search{$_}++;
}

# A list of Working groups to exclude.  It's a good idea to exclude the
# working groups generating the drafts.  We presume that people in the WG
# already know that the drafts exist.
#
# -W radext,dime
foreach (split(/,/,$opts{'W'})) {
    $wgs{$_} = 0;
}

# The rest of the command-line arguments are the technologies to look for.
foreach $name (@ARGV) {
    $tech{$name}++;
}

if (! $opts{'k'}) {
    undef $keyword;
} else {
    $keyword = $opts{'k'};
    $keyword =~ tr/[A-Z]/[a-z]/;
}

# Get the list of named technologies
if (scalar keys %tech > 0) {
    open FILE, "<tech.txt";
    $lineno = 0;

    while (<FILE>) {
	$lineno++;

	s/#.*$//;
	next if (/^\s*$/);

	@words = split /\s/;

	# ignore technologies that weren't named
	next if (! defined $tech{$words[0]});
	
	shift @words;

	# -WG #### -WG #### #### -WG
	foreach $doc (@words) {
	    # -foo means "ignore WG foo"
	    if ($doc =~ /^-/) {
		$doc =~ s/^-//;
		$wgs{$doc} = 0;

	    } elsif ($doc eq '') {
		next;

	    } elsif ($doc !~ /^\d+/) {
		die "FATAL: tech.txt line $lineno unrecognized text '$doc'\n";

	    } else {
		$search{$doc}++;

		# Remember that tech "foo" references doc "bar"
		$notech{$doc}++;
	    }
	}
    }
    close FILE;
}

if (scalar keys %search == 0) {
    if (scalar keys %tech > 0) {
	if (!$keyword) {
	    die "FATAL: Failed to find ", join ' ', @ARGV, "\n";
	}
    }

#    die "FATAL: Nothing to search for.\n";
}

# Open the list of active internet drafts.
open FILE, "<internet-drafts/all_id.txt" or die "Can't open all_id.txt\n";
while (<FILE>) {
  $_ =~ /^(draft-ietf-.*)\s+\d{4}-\d{2}-\d{2}\s+(.*)$/;
  $doc = $1;
  $state = $2;

  $doc =~ /draft-ietf-([^-]+)-/;
  $wg = $1;

  # Ignore drafts which have been published as RFCs
  next if ($state =~ /^RFC/);

  # Ignore certain WGs.  i.e. ignore RADEXT references to RADIUS rfcs.
  if (defined $wgs{$wg}) {
      next if ($wgs{$wg} == 0);
  }

  # cache the state of the draft.
  $drafts{$doc}{'state'} = $state;
}

close FILE;

sub check {
    my $line = shift;
    my $ref = shift;

    # Look for [RFC2865]
    if ($line =~ /\[RFC(\d+)\]/) {
	$drafts{$doc}{$ref}{$1}++;
	$rfc{$1}{$doc}++;
	return;
    }

    # Or maybe "RFC 2865,"
    if ($line =~ /RFC (\d+),/) {
	$drafts{$doc}{$ref}{$1}++;
	$rfc{$1}{$doc}++;
	return;
    }

    # TO DO: have a smarter parser.
}

#
#  Root through all of the drafts, finding the documents they reference.
#
foreach $doc (keys %drafts) {
    # Ignore ones which no longer exist.
    open FILE, "<internet-drafts/$doc.txt" or next;
    $normative = 0;
    $informative = 0;

#    print "? $doc\n";

   while (<FILE>) {
       if ($keyword && !$rfc{$keyword}{$doc} && ($_ =~ /$keyword/i)) {
	   $drafts{$doc}{"normative"}{$keyword}++;
	   $rfc{$keyword}{$doc}++;
       }

       # Ignore everything until we find the "Normative References" section.
       if (/^\d/) {
	   if (/\s*normative references\s*$/i) {
	       $normative = $opts{'n'};
	       $informative = 0;
	   }
	   
	   if (/\s*informative references\s*$/i) {
	       $informative = $opts{'i'};
	       $normative = 0;
	   }
	   
	   next;
       }

       # In the "normative references" section.
       if ($normative) {
	   check($_, 'normative');
       }

       if ($informative) {
	   check($_, 'informative');
       }
    }

    close FILE;
}

# For each RFC we're interested in, grab the list of drafts
# which reference that RFC.  Cache the draft.
%output = ();
foreach $doc (keys %search,$keyword) {
    # find each draft that has a normative reference to the RFC

    foreach $ref (keys %{$rfc{$doc}}) {
	$output{$ref} = $drafts{$ref}{'state'};
    }
}

# and print out the drafts by name, in sorted order
foreach $ref (sort {$a cmp $b} keys %output) {
    $padding = 50 - length($ref);

    print $ref, ' ' x $padding, $drafts{$ref}{'state'}, "\n";
}

exit 0;
